DOMVersionChecker.main(String[]).helpText=Aufruf:{0} a) PROG <configfile> generiere <neuer Vesionsname>{0} b) PROG <configfile> version{0} c) PROG <configfile> vergleiche <Versionsname>{0}{0}    Achtung - im Fall a) wird die im configfile angegebene {0}    XML Datei neu erzeugt und muss in die Versionsliste {0}    aufgenommen werden
DOMVersionChecker.DOMVersionChecker(String).error=Fehler beim Lesen des configfiles:
DOMVersionChecker.main(String[]).foundVersion=Gefundene Version:
DOMVersionChecker.main(String[])..noProperVersion=F\u00FCr die angegebene Datenbank wurde keine \u00FCbereinstimmende Definition gefunden.
DOMVersionChecker.main(String[]).accordanceFound=Vollst\u00E4ndige \u00DCbereinstimmung gefunden.
DOMVersionChecker.main(String[]).noAccordanceFound=Versionen stimmen nicht \u00FCberein:
DOMVersionChecker.compareWithVersion(String).DBVersionException=Unbekannte Version
DOMVersionChecker.compareWithVersion.differences.tableOnlyInDB=Tabelle <{0}> in der DB aber nicht im XML
DOMVersionChecker.compareWithVersion.differences.TableOnlyInXML=Tabelle <{0}> im XML aber nicht in der DB
DOMVersionChecker.compareWithVersion.differences.ColumnOnlyInDB=Tabelle <[0]> Spalte <{1}> in der DB aber nicht im XML
DOMVersionChecker.compareWithVersion.differences.ColumnOnlyInXML=Tabelle <{0}> Spalte <{1}> in XML aber nicht in der DB
DOMVersionChecker.compareWithVersion.nullableDiffers=Tabelle <{0}> Spalte <{1}> nullable db: {2} / xml: {3}
DOMVersionChecker.compareWithVersion.sizeDiffers=Tabelle <{0}> Spalte <{1}> size db: {2} / xml: {3}
DOMVersionChecker.compareWithVersion.typeDiffers=Tabelle <{0}> Spalte <{1}> type db: {2} / xml: {3}
DOMVersionChecker.readVersionsXML().noXMLFound=Keine XML Informationen zum einlesen gefunden, falls neue erzeugt werden sollen ist dies korrekt.
