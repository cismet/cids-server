DOMVersionChecker.main(String[]).helpText=Usage:{0} a) PROG <configfile> generiere <new version name>{0} b) PROG <config file> version{0} c) PROG <config file> vergleiche <version name>{0}{0}    Note - in case a) the XML file, which is given by the configuration file,{0} will be created and must be added to the version list {0}
DOMVersionChecker.DOMVersionChecker(String).error=Error while reading the configuration file:
DOMVersionChecker.main(String[]).foundVersion=Found version:
DOMVersionChecker.main(String[])..noProperVersion=No proper definition found for the given database.
DOMVersionChecker.main(String[]).accordanceFound=Complete conformity found.
DOMVersionChecker.main(String[]).noAccordanceFound=The versions are not conform:
DOMVersionChecker.compareWithVersion(String).DBVersionException=Unknown version
DOMVersionChecker.compareWithVersion(String).differences.tableOnlyInDB=Table <{0}> is contained in the DB, but not in the XML file
DOMVersionChecker.compareWithVersion(String).differences.TableOnlyInXML=Table <{0}> is contained in the XML file, but not in the DB
DOMVersionChecker.compareWithVersion(String).differences.ColumnOnlyInDB=Table<[0]> Column <{1}> is contained in the DB, but not in the XML file
DOMVersionChecker.compareWithVersion(String).differences.ColumnOnlyInXML=Table <{0}> Column <{1}> is contained in the XML file, but not in the DB
DOMVersionChecker.compareWithVersion(String).nullableDiffers=Table <{0}> Column <{1}> nullable db: {2} / xml: {3}
DOMVersionChecker.compareWithVersion(String).sizeDiffers=Table <{0}> Column <{1}> size db: {2} / xml: {3}
DOMVersionChecker.compareWithVersion(String).typeDiffers=Table <{0}> Column <{1}> type db: {2} / xml: {3}
DOMVersionChecker.readVersionsXML().noXMLFound=No XMl information to read found. This is correct, if new ones should be created.
